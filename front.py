import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import speech_recognition as sr
from sklearn.preprocessing import MinMaxScaler

# Localization dictionaries for different languages
translations = {
    "en": {
        "title": "ЁЯУ▒ Stock Predictor App",
        "select_language": "Select Language",
        "listening": "ЁЯОЩ Listening in en... please speak now.",
        "voice_captured": "тЬЕ Voice captured!",
        "company_said": "ЁЯЧг You said: `{}`",
        "data_for": "ЁЯУД Data for: {}",
        "last_close": "ЁЯУЙ Last Close: тВ╣{:.2f}",
        "predicted_next": "ЁЯУИ Predicted Next: тВ╣{:.2f}",
        "investment_suggestion": "ЁЯТб Investment Suggestion",
        "strong_buy": "ЁЯФ╝ Strong Buy (тЖС {:.2f}%)",
        "cautious_buy": "ЁЯЯб Cautious Buy (тЖС {:.2f}%)",
        "hold": "тЪЦя╕П Hold ({:.2f}%)",
        "fall_expected": "ЁЯФ╗ Fall Expected (тЖУ {:.2f}%)",
        "suggested_investment": "ЁЯТ░ Suggested Investment: тВ╣{}",
        "estimated_profit": "ЁЯУИ Estimated Profit: тВ╣{:.2f}",
        "risk_level": "ЁЯЯв Risk Level: Low",
        "cautious_risk_level": "ЁЯЯб Risk Level: Moderate",
        "medium_risk_level": "ЁЯЯа Risk Level: Medium",
        "high_risk_level": "ЁЯФ┤ Risk Level: High",
        "error_company_not_found": "тЭМ Company not found. Try using keywords like HDFC, TCS, etc.",
        "click_to_speak": "ЁЯОд Click to Speak"
    },
    "te": {
        "title": "ЁЯУ▒ р░╕р▒Нр░Яр░╛р░Хр▒Н р░кр▒Нр░░р░┐р░бр░┐р░Хр▒Нр░Яр░░р▒Н р░пр░╛р░кр▒Н",
        "select_language": "р░нр░╛р░╖ р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐",
        "listening": "ЁЯОЩ te р░▓р▒Л р░╡р░┐р░ир░┐р░кр░┐р░╕р▒Нр░др▒Лр░Вр░жр░┐... р░жр░пр░Ър▒Зр░╕р░┐ р░Зр░кр▒Нр░кр▒Бр░бр▒Б р░ор░╛р░Яр▒Нр░▓р░╛р░бр░Вр░бр░┐.",
        "voice_captured": "тЬЕ р░Жр░бр░┐р░пр▒Л р░Хр▒Нр░пр░╛р░кр▒Нр░Ър░░р▒Н р░Ер░пр░┐р░Вр░жр░┐!",
        "company_said": "ЁЯЧг р░ор▒Ар░░р▒Б р░Ър▒Жр░кр▒Нр░кр░┐р░ир░жр░┐: `{}`",
        "data_for": "ЁЯУД р░бр▒Зр░Яр░╛: {}",
        "last_close": "ЁЯУЙ р░Ър░┐р░╡р░░р░┐ р░Хр▒Нр░▓р▒Лр░Ьр▒Н: тВ╣{:.2f}",
        "predicted_next": "ЁЯУИ р░Ер░Вр░Ър░ир░╛ р░кр▒Нр░░р▒Ир░╡р▒Зр░Яр▒Н: тВ╣{:.2f}",
        "investment_suggestion": "ЁЯТб р░кр▒Жр░Яр▒Нр░Яр▒Бр░мр░бр░┐ р░╕р░▓р░╣р░╛",
        "strong_buy": "ЁЯФ╝ р░мр░▓р░ор▒Ир░и р░Хр▒Кр░ир▒Бр░Чр▒Лр░▓р▒Б (тЖС {:.2f}%)",
        "cautious_buy": "ЁЯЯб р░Ьр░╛р░Чр▒Нр░░р░др▒Нр░д р░Хр▒Кр░ир▒Бр░Чр▒Лр░▓р▒Б (тЖС {:.2f}%)",
        "hold": "тЪЦя╕П р░кр░Яр▒Нр░Яр▒Бр░Хр▒Лр░Вр░бр░┐ ({:.2f}%)",
        "fall_expected": "ЁЯФ╗ р░кр░бр░┐р░кр▒Лр░др▒Бр░Вр░жр░ир░┐ р░Ер░Вр░Ър░ир░╛ (тЖУ {:.2f}%)",
        "suggested_investment": "ЁЯТ░ р░╕р▒Вр░Ър░┐р░Вр░Ър░┐р░и р░кр▒Жр░Яр▒Нр░Яр▒Бр░мр░бр░┐: тВ╣{}",
        "estimated_profit": "ЁЯУИ р░Ер░Вр░Ър░ир░╛ р░▓р░╛р░нр░В: тВ╣{:.2f}",
        "risk_level": "ЁЯЯв р░кр▒Нр░░р░ор░╛р░жр░В р░╕р▒Нр░ер░╛р░пр░┐: р░др░Хр▒Нр░Хр▒Бр░╡",
        "cautious_risk_level": "ЁЯЯб р░кр▒Нр░░р░ор░╛р░жр░В р░╕р▒Нр░ер░╛р░пр░┐: р░ор░зр▒Нр░пр░╕р▒Нр░е",
        "medium_risk_level": "ЁЯЯа р░кр▒Нр░░р░ор░╛р░жр░В р░╕р▒Нр░ер░╛р░пр░┐: р░ор░зр▒Нр░п",
        "high_risk_level": "ЁЯФ┤ р░кр▒Нр░░р░ор░╛р░жр░В р░╕р▒Нр░ер░╛р░пр░┐: р░Ер░зр░┐р░Х",
        "error_company_not_found": "тЭМ р░Хр░Вр░кр▒Жр░ир▒А р░Хр░ир▒Бр░Чр▒Кр░ир░мр░бр░▓р▒Зр░жр▒Б. HDFC, TCS р░╡р░Вр░Яр░┐ р░Хр▒Ар░╡р░░р▒Нр░бр▒Нр░╕р▒Н р░Йр░кр░пр▒Лр░Чр░┐р░Вр░Ър░Вр░бр░┐.",
        "click_to_speak": "ЁЯОд р░ор░╛р░Яр▒Нр░▓р░╛р░бр░бр░╛р░ир░┐р░Хр░┐ р░Хр▒Нр░▓р░┐р░Хр▒Н р░Ър▒Зр░пр░Вр░бр░┐"
    },
    "hi": {
        "title": "ЁЯУ▒ рд╕реНрдЯреЙрдХ рдкреНрд░реЗрдбрд┐рдХреНрдЯрд░ рдРрдк",
        "select_language": "рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ",
        "listening": "ЁЯОЩ hi рдореЗрдВ рд╕реБрди рд░рд╣рд╛ рд╣реВрдБ... рдХреГрдкрдпрд╛ рдЕрдм рдмреЛрд▓реЗрдВред",
        "voice_captured": "тЬЕ рдЖрд╡рд╛рдЬрд╝ рдХреИрдкреНрдЪрд░ рд╣реЛ рдЧрдИ!",
        "company_said": "ЁЯЧг рдЖрдкрдиреЗ рдХрд╣рд╛: `{}`",
        "data_for": "ЁЯУД рдбреЗрдЯрд╛ рдХреЗ рд▓рд┐рдП: {}",
        "last_close": "ЁЯУЙ рдЖрдЦрд┐рд░реА рдмрдВрдж: тВ╣{:.2f}",
        "predicted_next": "ЁЯУИ рдЕрдЧрд▓рд╛ рдЕрдиреБрдорд╛рдирд┐рдд: тВ╣{:.2f}",
        "investment_suggestion": "ЁЯТб рдирд┐рд╡реЗрд╢ рд╕реБрдЭрд╛рд╡",
        "strong_buy": "ЁЯФ╝ рдордЬрдмреВрдд рдЦрд░реАрджреЗрдВ (тЖС {:.2f}%)",
        "cautious_buy": "ЁЯЯб рд╕рддрд░реНрдХ рдЦрд░реАрджреЗрдВ (тЖС {:.2f}%)",
        "hold": "тЪЦя╕П рд╣реЛрд▓реНрдб рдХрд░реЗрдВ ({:.2f}%)",
        "fall_expected": "ЁЯФ╗ рдЧрд┐рд░рд╛рд╡рдЯ рдХреА рдЙрдореНрдореАрдж (тЖУ {:.2f}%)",
        "suggested_investment": "ЁЯТ░ рд╕реБрдЭрд╛рдИ рдЧрдИ рдирд┐рд╡реЗрд╢ рд░рд╛рд╢рд┐: тВ╣{}",
        "estimated_profit": "ЁЯУИ рдЕрдиреБрдорд╛рдирд┐рдд рд▓рд╛рдн: тВ╣{:.2f}",
        "risk_level": "ЁЯЯв рдЬреЛрдЦрд┐рдо рд╕реНрддрд░: рдХрдо",
        "cautious_risk_level": "ЁЯЯб рдЬреЛрдЦрд┐рдо рд╕реНрддрд░: рдордзреНрдпрдо",
        "medium_risk_level": "ЁЯЯа рдЬреЛрдЦрд┐рдо рд╕реНрддрд░: рдЙрдЪреНрдЪ",
        "high_risk_level": "ЁЯФ┤ рдЬреЛрдЦрд┐рдо рд╕реНрддрд░: рдмрд╣реБрдд рдЙрдЪреНрдЪ",
        "error_company_not_found": "тЭМ рдХрдВрдкрдиреА рдирд╣реАрдВ рдорд┐рд▓реАред HDFC, TCS рдЬреИрд╕реЗ рдХреАрд╡рд░реНрдбреНрд╕ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред",
        "click_to_speak": "ЁЯОд рдмреЛрд▓рдиреЗ рдХреЗ рд▓рд┐рдП рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ"
    },
    "ta": {
        "title": "ЁЯУ▒ ро╕рпНроЯро╛роХрпН рокрпНро░ро┐роЯро┐роХрпНроЯро░рпН роЖрокрпН",
        "select_language": "роорпКро┤ро┐ родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН",
        "listening": "ЁЯОЩ ta роЗро▓рпН роХрпЗроЯрпНроХро┐ройрпНро▒рпЗройрпН... родропро╡рпБроЪрпЖропрпНродрпБ роЗрокрпНрокрпЛродрпБ рокрпЗроЪро╡рпБроорпН.",
        "voice_captured": "тЬЕ роХрпБро░ро▓рпН роХрпИрокрпНрокро▒рпНро▒рокрпНрокроЯрпНроЯродрпБ!",
        "company_said": "ЁЯЧг роирпАроЩрпНроХро│рпН роЪрпКройрпНройродрпБ: `{}`",
        "data_for": "ЁЯУД родро░ро╡рпБ: {}",
        "last_close": "ЁЯУЙ роХроЯрпИроЪро┐ропро┐ро▓рпН роорпВроЯро┐роп ро╡ро┐ро▓рпИ: тВ╣{:.2f}",
        "predicted_next": "ЁЯУИ роЕроЯрпБродрпНрод роорпБройрпНройро▒ро┐ро╡рпБ: тВ╣{:.2f}",
        "investment_suggestion": "ЁЯТб роорпБродро▓рпАроЯрпНроЯрпБ рокро░ро┐роирпНродрпБро░рпИ",
        "strong_buy": "ЁЯФ╝ ро╡ро▓рпБро╡ро╛рой ро╡ро╛роЩрпНроХ (тЖС {:.2f}%)",
        "cautious_buy": "ЁЯЯб роОроЪрпНроЪро░ро┐роХрпНроХрпИропрпБроЯройрпН ро╡ро╛роЩрпНроХ (тЖС {:.2f}%)",
        "hold": "тЪЦя╕П рокро┐роЯро┐родрпНродрпБ ро╡рпИроХрпНроХро╡рпБроорпН ({:.2f}%)",
        "fall_expected": "ЁЯФ╗ ро╡рпАро┤рпНроЪрпНроЪро┐ роОродро┐ро░рпНрокро╛ро░рпНроХрпНроХрокрпНрокроЯрпБроХро┐ро▒родрпБ (тЖУ {:.2f}%)",
        "suggested_investment": "ЁЯТ░ рокро░ро┐роирпНродрпБро░рпИроХрпНроХрокрпНрокроЯрпНроЯ роорпБродро▓рпАроЯрпБ: тВ╣{}",
        "estimated_profit": "ЁЯУИ роородро┐рокрпНрокро┐роЯрокрпНрокроЯрпНроЯ ро▓ро╛рокроорпН: тВ╣{:.2f}",
        "risk_level": "ЁЯЯв роЖрокродрпНродрпБ роиро┐ро▓рпИ: роХрпБро▒рпИроирпНродродрпБ",
        "cautious_risk_level": "ЁЯЯб роЖрокродрпНродрпБ роиро┐ро▓рпИ: рооро┐родрооро╛ройродрпБ",
        "medium_risk_level": "ЁЯЯа роЖрокродрпНродрпБ роиро┐ро▓рпИ: роородрпНродро┐роп",
        "high_risk_level": "ЁЯФ┤ роЖрокродрпНродрпБ роиро┐ро▓рпИ: роЕродро┐роХ",
        "error_company_not_found": "тЭМ роиро┐ро▒рпБро╡ройроорпН роХрогрпНроЯрпБрокро┐роЯро┐роХрпНроХро╡ро┐ро▓рпНро▓рпИ. HDFC, TCS рокрпЛройрпНро▒ роорпБроХрпНроХро┐роп ро╡ро╛ро░рпНродрпНродрпИроХро│рпИ рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН.",
        "click_to_speak": "ЁЯОд рокрпЗроЪ роХро┐ро│ро┐роХрпН роЪрпЖропрпНропро╡рпБроорпН"
    },
    "kn": {
        "title": "ЁЯУ▒ р▓╕р│Нр▓Яр▓╛р▓Хр│Н р▓кр│Нр▓░р▓┐р▓бр▓┐р▓Хр│Нр▓Яр▓░р│Н р▓Жр▓кр│Н",
        "select_language": "р▓нр▓╛р▓╖р│Ж р▓Жр▓пр│Нр▓Хр│Жр▓ор▓╛р▓бр▓┐",
        "listening": "ЁЯОЩ kn р▓ир▓▓р│Нр▓▓р▓┐ р▓Хр│Зр▓│р│Бр▓др│Нр▓др▓┐р▓жр│Нр▓жр│Зр▓ир│Ж... р▓жр▓пр▓╡р▓┐р▓Яр│Нр▓Яр│Б р▓Ир▓Ч р▓ор▓╛р▓др▓ир▓╛р▓бр▓┐.",
        "voice_captured": "тЬЕ р▓зр│Нр▓╡р▓ир▓┐ р▓Хр│Нр▓пр▓╛р▓кр│Нр▓Ър▓░р│Н р▓Жр▓Чр▓┐р▓жр│Ж!",
        "company_said": "ЁЯЧг р▓ир│Ар▓╡р│Б р▓╣р│Зр▓│р▓┐р▓жр▓╡р│Б: `{}`",
        "data_for": "ЁЯУД р▓бр│Зр▓Яр▓╛: {}",
        "last_close": "ЁЯУЙ р▓Хр│Кр▓ир│Жр▓п р▓Хр│Нр▓▓р│Лр▓╕р│Н: тВ╣{:.2f}",
        "predicted_next": "ЁЯУИ р▓ор│Бр▓Вр▓жр▓┐р▓и р▓Ер▓ир│Бр▓╡р▓╛р▓жр▓┐р▓д: тВ╣{:.2f}",
        "investment_suggestion": "ЁЯТб р▓╣р│Вр▓бр▓┐р▓Хр│Ж р▓╕р▓▓р▓╣р│Ж",
        "strong_buy": "ЁЯФ╝ р▓мр▓▓р▓╡р▓╛р▓ж р▓Цр▓░р│Ар▓жр▓┐ (тЖС {:.2f}%)",
        "cautious_buy": "ЁЯЯб р▓Ор▓Ър│Нр▓Ър▓░р▓┐р▓Хр│Жр▓пр▓┐р▓Вр▓ж р▓Цр▓░р│Ар▓жр▓┐ (тЖС {:.2f}%)",
        "hold": "тЪЦя╕П р▓╣р▓┐р▓бр▓┐р▓жр│Бр▓Хр│Кр▓│р│Нр▓│р▓┐ ({:.2f}%)",
        "fall_expected": "ЁЯФ╗ р▓Хр│Жр▓│р▓Чр│Ж р▓Зр▓│р▓┐р▓Хр│Жр▓пр▓╛р▓Чр│Бр▓╡р│Бр▓жр▓╛р▓Чр▓┐ р▓Кр▓╣р▓┐р▓╕р▓▓р▓╛р▓Чр▓┐р▓жр│Ж (тЖУ {:.2f}%)",
        "suggested_investment": "ЁЯТ░ р▓╕р│Вр▓Ър▓┐р▓╕р▓▓р▓╛р▓Чр▓┐р▓░р│Бр▓╡ р▓╣р│Вр▓бр▓┐р▓Хр│Ж: тВ╣{}",
        "estimated_profit": "ЁЯУИ р▓Ер▓Вр▓жр▓╛р▓Ьр│Б р▓▓р▓╛р▓н: тВ╣{:.2f}",
        "risk_level": "ЁЯЯв р▓Ер▓кр▓╛р▓п р▓ор▓Яр│Нр▓Я: р▓Хр▓бр▓┐р▓ор│Ж",
        "cautious_risk_level": "ЁЯЯб р▓Ер▓кр▓╛р▓п р▓ор▓Яр│Нр▓Я: р▓ор▓зр│Нр▓пр▓о",
        "medium_risk_level": "ЁЯЯа р▓Ер▓кр▓╛р▓п р▓ор▓Яр│Нр▓Я: р▓ор▓зр│Нр▓п",
        "high_risk_level": "ЁЯФ┤ р▓Ер▓кр▓╛р▓п р▓ор▓Яр│Нр▓Я: р▓╣р│Жр▓Ър│Нр▓Ър│Б",
        "error_company_not_found": "тЭМ р▓Хр▓Вр▓кр▓ир▓┐р▓пр▓ир│Нр▓ир│Б р▓Хр▓Вр▓бр│Бр▓╣р▓┐р▓бр▓┐р▓пр▓▓р▓┐р▓▓р│Нр▓▓. HDFC, TCS р▓Ор▓Вр▓м р▓Хр│Ар▓╡р▓░р│Нр▓бр│НтАМр▓Чр▓│р▓ир│Нр▓ир│Б р▓мр▓│р▓╕р▓┐.",
        "click_to_speak": "ЁЯОд р▓ор▓╛р▓др▓ир▓╛р▓бр▓▓р│Б р▓Хр│Нр▓▓р▓┐р▓Хр│Н р▓ор▓╛р▓бр▓┐"
    },
    "mr": {
        "title": "ЁЯУ▒ рд╕реНрдЯреЙрдХ рдкреНрд░реЗрдбрд┐рдХреНрдЯрд░ рдЕтАНреЕрдк",
        "select_language": "рднрд╛рд╖рд╛ рдирд┐рд╡рдбрд╛",
        "listening": "ЁЯОЩ mr рдордзреНрдпреЗ рдРрдХрдд рдЖрд╣реЗ... рдХреГрдкрдпрд╛ рдЖрддрд╛ рдмреЛрд▓рд╛.",
        "voice_captured": "тЬЕ рдЖрд╡рд╛рдЬ рдХреЕрдкреНрдЪрд░ рдЭрд╛рд▓рд╛!",
        "company_said": "ЁЯЧг рддреБрдореНрд╣реА рдореНрд╣рдгрд╛рд▓рд╛рдд: `{}`",
        "data_for": "ЁЯУД рдбреЗрдЯрд╛: {}",
        "last_close": "ЁЯУЙ рд╢реЗрд╡рдЯрдЪреА рдмрдВрдж: тВ╣{:.2f}",
        "predicted_next": "ЁЯУИ рдкреБрдвреАрд▓ рдЕрдиреНрджрд╛рдЬ: тВ╣{:.2f}",
        "investment_suggestion": "ЁЯТб рдЧреБрдВрддрд╡рдгреВрдХ рд╕рд▓реНрд▓рд╛",
        "strong_buy": "ЁЯФ╝ рдордЬрдмреВрдд рдЦрд░реЗрджреА (тЖС {:.2f}%)",
        "cautious_buy": "ЁЯЯб рдХрд╛рд│рдЬреАрдкреВрд░реНрд╡рдХ рдЦрд░реЗрджреА (тЖС {:.2f}%)",
        "hold": "тЪЦя╕П рд╣реЛрд▓реНрдб рдХрд░рд╛ ({:.2f}%)",
        "fall_expected": "ЁЯФ╗ рдШрд╕рд░рдг рдЕрдкреЗрдХреНрд╖рд┐рдд рдЖрд╣реЗ (тЖУ {:.2f}%)",
        "suggested_investment": "ЁЯТ░ рд╕реБрдЪрд╡рд▓реЗрд▓реА рдЧреБрдВрддрд╡рдгреВрдХ: тВ╣{}",
        "estimated_profit": "ЁЯУИ рдЕрдВрджрд╛рдЬрд┐рдд рдирдлрд╛: тВ╣{:.2f}",
        "risk_level": "ЁЯЯв рдЬреЛрдЦреАрдо рд╕реНрддрд░: рдХрдореА",
        "cautious_risk_level": "ЁЯЯб рдЬреЛрдЦреАрдо рд╕реНрддрд░: рдордзреНрдпрдо",
        "medium_risk_level": "ЁЯЯа рдЬреЛрдЦреАрдо рд╕реНрддрд░: рдЙрдЪреНрдЪ",
        "high_risk_level": "ЁЯФ┤ рдЬреЛрдЦреАрдо рд╕реНрддрд░: рдЕрддреНрдпрдзрд┐рдХ",
        "error_company_not_found": "тЭМ рдХрдВрдкрдиреА рд╕рд╛рдкрдбрд▓реА рдирд╛рд╣реА. HDFC, TCS рд╕рд╛рд░рдЦреНрдпрд╛ рдХрд┐рд╡реНрд╣рд░реНрдбреНрд╕ рд╡рд╛рдкрд░рд╛.",
        "click_to_speak": "ЁЯОд рдмреЛрд▓рдгреНрдпрд╛рд╕рд╛рдареА рдХреНрд▓рд┐рдХ рдХрд░рд╛"
    }
}



# Function to simulate stock prediction and generate a graph
def simulate_stock_prediction():
    # Simulate some stock data for the sake of demo
    dates = pd.date_range(start="2023-01-01", periods=100)
    close_prices = np.random.randn(100).cumsum() + 1500
    data = pd.DataFrame({'Date': dates, 'Close': close_prices})

    # Plot the stock prices
    plt.figure(figsize=(10, 6))
    plt.plot(data['Date'], data['Close'], color='blue', label='Historical Prices')
    plt.title('Stock Price Prediction Simulation')
    plt.xlabel('Date')

    plt.ylabel('Price')
    plt.legend()

    st.pyplot(plt)  # Show the plot in Streamlit

    # Return the last close price and a simulated predicted price
    return data['Close'].iloc[-1], data['Close'].iloc[-1] + np.random.uniform(10, 20)

# Function to recognize speech input
def recognize_speech(language_code):
    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
        st.write(translations[language_code]['listening'])
        audio = recognizer.listen(source)
        st.write(translations[language_code]['voice_captured'])
    try:
        query = recognizer.recognize_google(audio, language=language_code)
        st.write(translations[language_code]['company_said'].format(query))
        return query
    except sr.UnknownValueError:
        st.write(translations[language_code]['error_company_not_found'])
        return None


# Function to match company files based on the recognized speech
def match_company_files(query, language_code):
    mapping = {
        "en": {
            "hdfc": "HDFC_Bank.csv",
            "tcs": "TCS.csv",
            "reliance": "RELIANCE.csv",
            "infosys": "INFOSYS.csv",
            "hindustan": "HINDUSTAN.csv",
            "itc": "ITC.csv"
        },
        "te": {  # Telugu transliterations
            "р░Яр░┐р░╕р░┐р░Ор░╕р▒Н": "TCS.csv",
            "р░╣р▒Жр░Ър▒Нр░бр░┐р░Ор░лр▒Нр░╕р░┐": "HDFC_Bank.csv",
            "р░░р░┐р░▓р░пр░ир▒Нр░╕р▒Н": "RELIANCE.csv",
            "р░Зр░ир▒Нр░лр▒Лр░╕р░┐р░╕р▒Н": "INFOSYS.csv",
            "р░Зр░Яр░┐р░╕р░┐": "ITC.csv"
        },
        "hi": {  # Hindi transliterations
            "рдЯреАрд╕реАрдПрд╕": "TCS.csv",
            "рдПрдЪрдбреАрдПрдлрд╕реА": "HDFC_Bank.csv",
            "рд░рд┐рд▓рд╛рдпрдВрд╕": "RELIANCE.csv",
            "рдЗрдВрдлреЛрд╕рд┐рд╕": "INFOSYS.csv",
            "рдЖрдИрдЯреАрд╕реА": "ITC.csv"
        },
        "ta": {  # Tamil transliterations
            "tcs": "TCS.csv",
            "ро╣рпЖроЪрпНроЯро┐роОроГрокрпНроЪро┐": "HDFC_Bank.csv",
            "ро░ро┐ро▓рпИропройрпНро╕рпН": "RELIANCE.csv",
            "роЗройрпНроГрокрпЛроЪро┐ро╕рпН": "INFOSYS.csv",
            "роРроЯро┐": "ITC.csv"
        },
        "kn": {  # Kannada transliterations
            "tcs": "TCS.csv",
            "р▓╣р│Жр▓Ър│НтАМр▓бр▓┐р▓Ор▓лр│НтАМр▓╕р▓┐": "HDFC_Bank.csv",
            "р▓░р▓┐р▓▓р▓пр▓ир│Нр▓╕р│Н": "RELIANCE.csv",
            "р▓Зр▓ир│Нр▓лр│Лр▓╕р▓┐р▓╕р│Н": "INFOSYS.csv",
            "р▓Рр▓Яр▓┐р▓╕р▓┐": "ITC.csv"
        },
        "mr": {  # Marathi transliterations
            "tcs": "TCS.csv",
            "рдПрдЪрдбреАрдПрдлрд╕реА": "HDFC_Bank.csv",
            "рд░рд┐рд▓рд╛рдпрдиреНрд╕": "RELIANCE.csv",
            "рдЗрдВрдлреЛрд╕рд┐рд╕": "INFOSYS.csv",
            "рдЖрдпрдЯреАрд╕реА": "ITC.csv"
        }
    }

    matched = []
    query = query.strip().lower()  # Ensure it's lowercase for easier matching

    # Check for matches in the language-specific dictionary
    for name, filename in mapping.get(language_code, {}).items():
        if name in query:
            matched.append((name.upper(), filename))
    return matched


# Set up Streamlit UI for language selection
st.markdown(f"<h1 style='text-align: center;'>{translations['en']['title']}</h1>", unsafe_allow_html=True)
language = st.selectbox(translations['en']['select_language'], ['en', 'te', 'hi','ta','kn','mr'])

# Add button for voice input
if st.button(translations[language]['click_to_speak']):
    # Capture company name via speech recognition
    company_name = recognize_speech(language)

    if company_name:
        # Match the company name to the corresponding stock file
        matched_files = match_company_files(company_name, language)

        if matched_files:
            for matched in matched_files:
                company_name, filename = matched
                st.write(translations[language]['data_for'].format(company_name))

                # Simulate stock prediction for the recognized company
                last_close, predicted_price = simulate_stock_prediction()

                # Display prediction details in the selected language
                st.write(translations[language]['last_close'].format(last_close))
                st.write(translations[language]['predicted_next'].format(predicted_price))

                # Simulate investment suggestion
                investment_suggestion = translations[language]['cautious_buy'].format(np.random.uniform(0.5, 1.5))
                suggested_investment = 5000
                estimated_profit = np.random.uniform(40, 100)
                risk_level = translations[language]['cautious_risk_level']

                # Show investment suggestion and predicted profit
                st.write(translations[language]['investment_suggestion'])
                st.write(investment_suggestion)
                st.write(translations[language]['suggested_investment'].format(suggested_investment))
                st.write(translations[language]['estimated_profit'].format(estimated_profit))
                st.write(translations[language]['risk_level'])
                st.write(risk_level)
        else:
            st.write(translations[language]['error_company_not_found'])